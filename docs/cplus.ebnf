
module                    ::= decl* EOF

decl                      ::= var_decl | func_decl

var_decl                  ::= "var" type IDENT ( "=" expr )? ";"

type                      ::= primitive_type ( "[" "]" )*

primitive_type            ::= "int" | "float"

func_decl                 ::= "func" ret_type IDENT param_list block

ret_type                  ::= "void" | type

param_list                ::= "(" ( param ( "," param )* )? ")"

param                     ::= type IDENT

block                     ::= "{" stmt* "}"

stmt                      ::= var_decl
                            | assign_stmt
                            | return_stmt
                            | expr_stmt

assign_stmt               ::= IDENT subscr* "=" expr ";"

subscr                    ::= "[" expr "]"

return_stmt               ::= "return" expr? ";"

expr_stmt                 ::= expr ";"

expr                      ::= mul_expr ( ( "+" | "-" ) mul_expr )*

mul_expr                  ::= unary_expr ( ( "*" | "/" | "%" ) unary_expr )*

unary_expr                ::= ( "+" | "-" ) unary_expr | call_expr

call_expr                 ::= primary_expr ( subscr | call )*

call                      ::= "(" ( expr ( "," expr )* )? ")"

primary_expr              ::= INT | FLOAT
                            | "[" ( expr ( "," expr )* )? "]"
                            | IDENT
                            | "(" expr ")"


module                    ::= decl* EOF

decl                      ::= func_decl

func_decl                 ::= "function" ret_type IDENT param_list block

ret_type                  ::= "void" | type

type                      ::= "int" | "float"

param_list                ::= "(" ( param ( "," param )* )? ")"

param                     ::= type IDENT

block                     ::= "{" stmt* "}"

stmt                      ::= return_stmt
                            | expr_stmt

return_stmt               ::= "return" expr? ";"

expr_stmt                 ::= expr ";"

expr                      ::= mul_expr ( ( "+" | "-" ) mul_expr )*

mul_expr                  ::= unary_expr ( ( "*" | "/" | "%" ) unary_expr )*

unary_expr                ::= ( "+" | "-" ) unary_expr | call_expr

call_expr                 ::= primary_expr ( "(" ( expr ( "," expr )* )? ")" )?

primary_expr              ::= INT | FLOAT
                            | IDENT
                            | "(" expr ")"

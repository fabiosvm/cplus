
module                    ::= decl* EOF

decl                      ::= var_decl | func_decl

var_decl                  ::= "var" type IDENT ( "=" expr )? ";"

type                      ::= primitive_type ( "[" "]" )*

primitive_type            ::= "bool" | "char" | "short" | "int" | "long"
                            | "float" | "double"

func_decl                 ::= "func" ret_type IDENT param_list block

ret_type                  ::= "void" | type

param_list                ::= "(" ( param ( "," param )* )? ")"

param                     ::= "inout"? type IDENT

block                     ::= "{" stmt* "}"

stmt                      ::= var_decl
                            | assign_stmt
                            | if_stmt
                            | while_stmt
                            | do_while_stmt
                            | for_stmt
                            | break_stmt
                            | continue_stmt
                            | return_stmt
                            | block
                            | expr_stmt

assign_stmt               ::= IDENT subscr* "=" expr ";"

subscr                    ::= "[" expr "]"

if_stmt                   ::= "if" "(" expr ")" stmt ( "else" stmt )?

while_stmt                ::= "while" "(" expr ")" stmt

do_while_stmt             ::= "do" stmt "while" "(" expr ")" ";"

for_stmt                  ::= "for" "(" type IDENT "in" expr ")" stmt

break_stmt                ::= "break" ";"

continue_stmt             ::= "continue" ";"

return_stmt               ::= "return" expr? ";"

expr_stmt                 ::= expr ";"

expr                      ::= and_expr ( "||" and_expr )*

and_expr                  ::= eq_expr ( "&&" eq_expr )*

eq_expr                   ::= rel_expr ( ( "==" | "!=" ) rel_expr )*

rel_expr                  ::= add_expr ( ( "<" | "<=" | ">" | ">=" ) add_expr )*

add_expr                  ::= mul_expr ( ( "+" | "-" ) mul_expr )*

mul_expr                  ::= unary_expr ( ( "*" | "/" | "%" ) unary_expr )*

unary_expr                ::= ( "!" | "+" | "-" ) unary_expr | call_expr

call_expr                 ::= primary_expr ( subscr | call )*

call                      ::= "(" ( expr ( "," expr )* )? ")"

primary_expr              ::= "false" | "true" | INT | FLOAT | CHAR | STRING
                            | new_expr
                            | init_list
                            | ref
                            | IDENT
                            | "(" expr ")"

new_expr                  ::= "new" type init_list?

init_list                 ::= "{" ( expr ( "," expr )* )? "}"

ref                       ::= "&" IDENT subscr*
